// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  username  String   @unique
  avatar    String?
  xp        Int      @default(0)
  level     Int      @default(1)
  streak    Int      @default(0)
  coins     Int      @default(100)
  gems      Int      @default(0)
  isPremium Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile        UserProfile?
  quests         Quest[]
  missions       Mission[]
  badges         UserBadge[]
  powerUps       UserPowerUp[]
  friendRequests FriendRequest[] @relation("RequesterUser")
  receivedRequests FriendRequest[] @relation("ReceiverUser")
  swipes         Swipe[]
  matches        Match[] @relation("UserMatches")
  matchedWith    Match[] @relation("MatchedUserMatches")
  races          Race[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Location data
  latitude    Float?
  longitude   Float?
  city        String?
  country     String?
  
  // Privacy settings
  locationEnabled    Boolean @default(false)
  discoveryEnabled   Boolean @default(true)
  discoveryRadius    Int     @default(50) // km
  
  // Interests
  interests   String[] // Array of interest tags
  bio         String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_profiles")
}

model Quest {
  id          String      @id @default(cuid())
  title       String
  description String
  category    String
  xpReward    Int
  coinReward  Int
  difficulty  Difficulty
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  missions UserQuest[]

  @@map("quests")
}

model UserQuest {
  id         String      @id @default(cuid())
  userId     String
  questId    String
  status     QuestStatus @default(ACTIVE)
  progress   Int         @default(0)
  startedAt  DateTime    @default(now())
  completedAt DateTime?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest Quest @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@unique([userId, questId])
  @@map("user_quests")
}

model Mission {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  type        MissionType
  target      Int      @default(1)
  current     Int      @default(0)
  xpReward    Int      @default(10)
  coinReward  Int      @default(5)
  isCompleted Boolean  @default(false)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("missions")
}

model Badge {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  rarity      BadgeRarity
  requirement String

  users UserBadge[]

  @@map("badges")
}

model UserBadge {
  id       String @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

model PowerUp {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  coinCost    Int
  gemCost     Int    @default(0)
  effect      String
  duration    Int? // minutes, null for instant effects

  users UserPowerUp[]

  @@map("power_ups")
}

model UserPowerUp {
  id        String    @id @default(cuid())
  userId    String
  powerUpId String
  quantity  Int       @default(1)
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  powerUp PowerUp @relation(fields: [powerUpId], references: [id], onDelete: Cascade)

  @@map("user_power_ups")
}

model FriendRequest {
  id          String        @id @default(cuid())
  requesterId String
  receiverId  String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  requester User @relation("RequesterUser", fields: [requesterId], references: [id], onDelete: Cascade)
  receiver  User @relation("ReceiverUser", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([requesterId, receiverId])
  @@map("friend_requests")
}

model Swipe {
  id        String    @id @default(cuid())
  swiperId  String
  swipedId  String
  direction SwipeDirection
  createdAt DateTime  @default(now())

  swiper User @relation(fields: [swiperId], references: [id], onDelete: Cascade)

  @@unique([swiperId, swipedId])
  @@map("swipes")
}

model Match {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())

  user1 User @relation("UserMatches", fields: [user1Id], references: [id], onDelete: Cascade)
  user2 User @relation("MatchedUserMatches", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@map("matches")
}

model Race {
  id        String   @id @default(cuid())
  userId    String
  questId   String
  opponentId String?
  status    RaceStatus @default(WAITING)
  startedAt DateTime?
  endedAt   DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("races")
}

// Enums
enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum QuestStatus {
  ACTIVE
  COMPLETED
  FAILED
}

enum MissionType {
  DAILY
  WEEKLY
  CUSTOM
  SOCIAL
}

enum BadgeRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum SwipeDirection {
  LEFT
  RIGHT
}

enum RaceStatus {
  WAITING
  ACTIVE
  COMPLETED
}